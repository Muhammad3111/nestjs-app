version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: exchange_app
    env_file:
      - .env
    ports:
      - '3001:3000' # host:container  -> nginx proksi host:3001 -> container 3000
    depends_on:
      - exchange_db
    # wait for postgres, run migrations (if you have), then start app
    command: >
      sh -c "until pg_isready -h exchange_db -p 5432 -U ${POSTGRES_USER}; do
               echo 'Waiting for Postgres...';
               sleep 1;
             done;
             # run migrations if you have (uncomment if exists)
             if [ -x \"./node_modules/.bin/typeorm\" ] || npm run | grep -q migrate; then
               echo 'Running migrations...';
               npm run migrate || true;
             fi;
             echo 'Starting app...';
             npm run start:prod"
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  exchange_db:
    container_name: exchange_db
    image: ankane/pgvector:latest
    env_file:
      - .env
    ports:
      - '5464:5432' # host 5464 -> container 5432 (so host postgres not collide)
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro # optional
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
